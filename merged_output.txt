
--- Content of file: About.jsx ---
/* eslint-disable no-unused-vars */
import React from "react";
import Title from "../components/Title";
import { assets } from "../assets/assets";
import NewsLetterBox from "../components/NewsLetterBox"

const About = () => {
  return (
    <div>
      <div className="text-2xl text-center pt-8 border-t">
        <Title text1={"ABOUT"} text2={"US"} />
      </div>
      <div className="my-10 flex flex-col md:flex-row gap-16">
        <img
          className="w-full md:max-w-[450px]"
          src={assets.about_img}
          alt=""
        />
        <div className="flex flex-col justify-center gap-6 md:w-3/4 text-gray-600">
          <p>
            Fashion Nepal is a trendy and stylish clothing brand that blends
            modern fashion with traditional Nepali influences. Known for its
            high-quality fabrics and unique designs, the brand offers a wide
            range of apparel, from casual wear to elegant ethnic outfits. Each
            piece is crafted with attention to detail, ensuring comfort and
            sophistication. Fashion Nepal aims to promote local craftsmanship
            while keeping up with global fashion trends. Whether you are looking
            for everyday wear or something special for an occasion, Fashion
            Nepal has something for everyone. The brand focuses on
            sustainability and ethical production, making it a choice for
            conscious shoppers. Experience the perfect fusion of culture and
            contemporary style with Fashion Nepal!
          </p>
          <p>
            Fashion Nepal offers a diverse range of stylish and high-quality
            clothing, including trendy casual wear, elegant ethnic and
            traditional outfits, and sophisticated formal attire. Our winter
            collection features warm and fashionable jackets, sweaters, and
            shawls, perfect for the season. We also provide customized clothing
            tailored to your unique style and fit. To complete your look,
            explore our selection of accessories, including scarves, bags, and
            jewelry. Committed to sustainability, we focus on eco-friendly
            materials and ethical production practices. Fashion Nepal blends
            tradition with modern trends, ensuring style and comfort for every
            occasion
          </p>
          <b className="text-gray-800">Our Mission</b>
          <p>
            Our mission is to redefine style by blending traditional Nepali
            craftsmanship with modern fashion trends. We aim to provide
            high-quality, comfortable, and affordable clothing that reflects
            cultural heritage while embracing contemporary designs. Our focus is
            on promoting local artisans and sustainable fashion through ethical
            production practices. We strive to inspire confidence and
            individuality in our customers by offering unique and stylish
            apparel. Fashion Nepal is dedicated to creating a positive impact in
            the fashion industry by prioritizing quality, innovation, and
            sustainability. Our goal is to make Nepali fashion globally
            recognized while supporting local communities
          </p>
        </div>
      </div>
      <div className="text-xl py-4">
        <Title text1={"WHY"} text2={"CHOOSE US"} />
      </div>
      <div className="flex flex-col md:flex-row text-sm mb-20">
        <div className="border border-gray-300 px-10 md:px-16 py-8 sm:py-20 flex flex-col gap-5">
          <b>Quality Assurance:</b>
          <p className="text-gray-600">
            {" "}
            At Fashion Nepal, we ensure top-notch quality by using premium
            fabrics and meticulous craftsmanship in every piece. Our strict
            quality control process guarantees durability, comfort, and flawless
            design. Customer satisfaction is our priority, and we stand by our
            commitment to excellence
          </p>
        </div>
        <div className="border border-gray-300 px-10 md:px-16 py-8 sm:py-20 flex flex-col gap-5">
          <b>Convenience:</b>
          <p className="text-gray-600">
            {" "}
            Fashion Nepal offers a seamless shopping experience with easy online
            ordering, fast delivery, and hassle-free returns. Our user-friendly
            platform and responsive customer support ensure a smooth and
            convenient shopping journey. Enjoy fashion at your fingertips with
            Fashion Nepal!
          </p>
        </div>
        <div className="border border-gray-300 px-10 md:px-16 py-8 sm:py-20 flex flex-col gap-5">
          <b>Exceptional Customer Service:</b>
          <p className="text-gray-600">
            {" "}
            At Fashion Nepal, we prioritize customer satisfaction with
            responsive support, easy returns, and a hassle-free shopping
            experience. Our dedicated team is always ready to assist you,
            ensuring a smooth and enjoyable journey from browsing to delivery.
            Your happiness is our commitment!
          </p>
        </div>
      </div>
      <NewsLetterBox/>
    </div>
  );
};

export default About;

--- Content of file: Collection.jsx ---
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable no-unused-vars */
import React, { useEffect, useState } from "react";
import useShopStore from "../store/shopStore";
import { assets } from "../assets/assets";
import Title from "../components/Title";
import ProductItem from "../components/ProductItem";

const Collection = () => {
  const { products,search,showSearch } = useShopStore();
  const [showFilter, setShowFilter] = useState(false);
  const [filterProducts, setFilterProducts] = useState([]);
  const [category, setCategory] = useState([]);
  const [subCategory, setSubCategory] = useState([]);

  const toggleCategory = (e) => {
    if (category.includes(e.target.value)) {
      setCategory((prev) => prev.filter((item) => item !== e.target.value));
    } else {
      setCategory((prev) => [...prev, e.target.value]);
    }
  };

  const toggleSubCategory = (e) => {
    if (subCategory.includes(e.target.value)) {
      setSubCategory((prev) => prev.filter((item) => item !== e.target.value));
    } else {
      setSubCategory((prev) => [...prev, e.target.value]);
    }
  };

  const applyFilter = () => {
    let productsCopy = products.slice();
    if (category.length > 0) {
      productsCopy = productsCopy.filter((item) =>
        category.includes(item.category)
      );
    }
    if (subCategory.length > 0) {
      productsCopy = productsCopy.filter((item) =>
        subCategory.includes(item.subCategory)
      );
    }
    if(showSearch && search){
      productsCopy = productsCopy.filter((item) =>
        item.name.toLowerCase().includes(search.toLowerCase())
      );
    }
    setFilterProducts(productsCopy);
  };

  const sortProducts = (sortType) => {
    let filteredProductsCopy = filterProducts.slice();
    switch (sortType) {
      case "low-high":
        setFilterProducts(
          filteredProductsCopy.sort((a, b) => a.price - b.price)
        );
        break;
      case "high-low":
        setFilterProducts(
          filteredProductsCopy.sort((a, b) => b.price - a.price)
        );
        break;

      default:
        applyFilter();
        break;
    }
  };

  useEffect(() => {
    applyFilter();
  }, [category, subCategory,search,showSearch,products]);



  return (
    <div className="flex flex-col sm:flex-row gap-1 sm:gap-10 pt-10 border-t">
      {/* Filters */}
      <div className=" min-w-60">
        <p
          onClick={() => setShowFilter(!showFilter)}
          className="my-2 flex items-center gap-2 text-xl cursor-pointer"
        >
          FILTERS
          <img
            src={assets.dropdown_icon}
            className={`h-3 sm:hidden ${showFilter ? "rotate-90" : ""}`}
            alt=""
          />
        </p>
        {/* category filter */}
        <div
          className={`border border-gray-300 pl-5 py-3 mt-6 ${
            showFilter ? "" : "hidden"
          } sm:block`}
        >
          <p className="mb-3 text-sm font-medium"> CATEGORIES</p>
          <div className="flex flex-col gap-2 text-sm font-light text-gray-700">
            <p className="flex gap-2">
              <input
                onChange={toggleCategory}
                type="checkbox"
                className="w-3"
                value={"Men"}
              />
              Men
            </p>
            <p className="flex gap-2">
              <input
                onChange={toggleCategory}
                type="checkbox"
                className="w-3"
                value={"Women"}
              />
              Women
            </p>
            <p className="flex gap-2">
              <input
                onChange={toggleCategory}
                type="checkbox"
                className="w-3"
                value={"Kids"}
              />
              Kids
            </p>
          </div>
        </div>
        {/* Sub category filter */}
        <div
          className={`border border-gray-300 pl-5 py-3 my-5 ${
            showFilter ? "" : "hidden"
          } sm:block`}
        >
          <p className="mb-3 text-sm font-medium">SUB CATEGORIES</p>
          <div className="flex flex-col gap-2 text-sm font-light text-gray-700">
            <p className="flex gap-2">
              <input
                onChange={toggleSubCategory}
                type="checkbox"
                className="w-3"
                value={"Topwear"}
              />
              Top Wear
            </p>
            <p className="flex gap-2">
              <input
                onChange={toggleSubCategory}
                type="checkbox"
                className="w-3"
                value={"Bottomwear"}
              />
              Bottom Wear
            </p>
            <p className="flex gap-2">
              <input
                onChange={toggleSubCategory}
                type="checkbox"
                className="w-3"
                value={"Winterwear"}
              />
              Winter Wear
            </p>
          </div>
        </div>
      </div>
      {/* products */}
      <div className="flex-1">
        <div className="flex justify-between  text-sm sm:text-2xl mb-4 gap-2">
          <Title text1={"ALL"} text2={"COLLECTIONS"} />
          {/* Product sort feature */}
          <select onChange={(e)=>sortProducts(e.target.value)} className="border-2 border-gray-300 sm:text-sm px-2 text-[11px]">
            <option value="relevant">Sort by: Relevant</option>
            <option value="low-high">Sort by: Low to High</option>
            <option value="high-low">Sort by: High to Low</option>
          </select>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 gap-y-6 ">
          {filterProducts.map((fp, index) => {
            return (
              <ProductItem
                key={index}
                id={fp._id}
                image={fp.image}
                name={fp.name}
                price={fp.price}
              />
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Collection;

--- Content of file: PlaceOrder.jsx ---
/* eslint-disable no-case-declarations */
/* eslint-disable no-unused-vars */
import React, { useState } from 'react'
import { Truck } from 'lucide-react';
import Title from "../components/Title"
import CartTotal from "../components/CartTotal"
import { assets } from '../assets/assets'
import { useNavigate } from "react-router-dom"
import { toast } from 'react-toastify'
import axios from 'axios'
import useShopStore from '../store/shopStore'
import { GenerateSignature } from '../utils/GenerateSignature.js';


const PlaceOrder = () => {
  const { token, cartItems, clearCart, getCartAmount, delivery_fee, products } = useShopStore();
  const transaction_uuid = Date.now().toString()
  const baseURL = import.meta.env.VITE_BACKEND_URL


  const [method, setMethod] = useState("cod")
  const [data, setData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    street: '',
    city: '',
    state: '',
    zipcode: '',
    country: '',
    phone: '',
  })
  const url = import.meta.env.VITE_BACKEND_URL

  const onChangeHandler = (e) => {
    setData((prevData) => ({ ...prevData, [e.target.name]: e.target.value }));
    localStorage.setItem('orderAddress', JSON.stringify(data));
  }

  const navigate = useNavigate()

  const onSubmitHandler = async (e) => {
    e.preventDefault()
    try {
      let orderItems = []
      for (const items in cartItems) {
        for (const item in cartItems[items]) {
          if (cartItems[items][item] > 0) {
            const itemInfo = structuredClone(products.find(product => product._id === items))
            if (itemInfo) {
              itemInfo.size = item
              itemInfo.quantity = cartItems[items][item]
              orderItems.push(itemInfo)
            }
          }
        }
      }
      let orderData = {
        items: orderItems,
        address: data,
        amount: getCartAmount() + delivery_fee
      }
      switch (method) {
        case "cod":
          const response = await axios.post(`${url}/api/order/place`, orderData, { headers: { token } })
          if (response.data.success) {
            clearCart()
            navigate('/orders')
            toast.success(response.data.message)
          } else {
            toast.error(response.data.message)
          }
          break;

        default:
          break;
      }
    } catch (error) {
      toast.error(error.message)
    }
  }

  const totalAmount = getCartAmount() + delivery_fee
  return (
    <div className='flex flex-col sm:flex-row justify-between gap-4 pt-5 min-h-[80vh] border-t '>
      {/* left side */}
      <div className='flex flex-col gap-4 w-full sm:max-w-[480px]'>
        <div className='text-xl sm:text-2xl my-3'>
          <Title text1={"DELIVERY"} text2={"INFORMATION"} />
        </div>
        <div className='flex gap-3'>
          <input name='firstName' onChange={onChangeHandler} value={data.firstName} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='First name' />
          <input name='lastName' onChange={onChangeHandler} value={data.lastName} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='Last name' />
        </div>
        <input name='email' onChange={onChangeHandler} value={data.email} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="email" placeholder='Email address ' />
        <input name='street' onChange={onChangeHandler} value={data.street} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='Street ' />
        <div className='flex gap-3'>
          <input name='city' onChange={onChangeHandler} value={data.city} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='City' />
          <input name='state' onChange={onChangeHandler} value={data.state} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='State' />
        </div>
        <div className='flex gap-3'>
          <input name='zipcode' onChange={onChangeHandler} value={data.zipcode} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="number" placeholder='Zipcode' />
          <input name='country' onChange={onChangeHandler} value={data.country} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="text" placeholder='Country' />
        </div>
        <input name='phone' onChange={onChangeHandler} value={data.phone} required className='border border-gray-300 rounded py-1.5 px-3.5 w-full' type="number" placeholder='Phone' />
      </div>
      {/* Right side */}
      <div className='mt-8'>
        <div className='mt-8 min-w-80'>
          <CartTotal />
        </div>
        <div className='mt-12'>
          <Title text1={"PAYMENT"} text2={"METHOD"} />
          <div className='flex gap-3 flex-col sm:flex-row'>
            <div className="flex flex-col gap-4 p-4 bg-white rounded-2xl shadow-md">
              {/* Esewa Payment Button */}
              <p className='text-sm text-pretty'>For testing Esewa: <br />eSewa ID: 9806800001 Password/MPIN: 1122 Token/OTP:123456</p>
              <form id="esewaForm" action="https://rc-epay.esewa.com.np/api/epay/main/v2/form" method="POST">
                <input type="hidden" name="amount" value={totalAmount} />
                <input type="hidden" name="tax_amount" value="0" />
                <input type="hidden" name="total_amount" value={totalAmount} />
                <input type="hidden" name="transaction_uuid" value={transaction_uuid} />
                <input type="hidden" name="product_code" value="EPAYTEST" />
                <input type="hidden" name="product_service_charge" value="0" />
                <input type="hidden" name="product_delivery_charge" value="0" />
                <input type="hidden" name="success_url" value={`${baseURL}/api/payment/esewa/success`} />
                <input type="hidden" name="failure_url" value={`${baseURL}/api/payment/esewa/failure`} />
                <input type="hidden" name="signed_field_names" value="total_amount,transaction_uuid,product_code" />
                <input type="hidden" name="signature" value={GenerateSignature(`total_amount=${totalAmount},transaction_uuid=${transaction_uuid},product_code=EPAYTEST`)} />
                <button type="submit" className="flex justify-center items-center w-full border-2 border-green-500 rounded-lg transition hover:bg-green-100">
                  <img src={assets.esewa_logo} alt="eSewa" className="w-20 h-full object-contain" />
                  <p>Pay with eSewa</p>
                </button>
              </form>


              {/* Cash on Delivery Button */}
              <button
                size="sm"
                onClick={onSubmitHandler}
                className="flex items-center justify-center gap-2 bg-gray-800 text-white hover:bg-gray-900 transition rounded-lg py-3"
              >
                <Truck className="w-5 h-5" />
                <span >Cash on Delivery</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PlaceOrder

--- Content of file: PaymentStatusPage.jsx ---
import React, { useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import useShopStore from '../store/shopStore';
import { toast } from 'react-toastify';
import axios from 'axios';

const PaymentStatusPage = () => {
    const { token, cartItems, clearCart, getCartAmount, delivery_fee, products } = useShopStore();
    const navigate = useNavigate();
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const status = queryParams.get('status');
    const orderProcessed = useRef(false); // Prevent duplicate calls
    const url = import.meta.env.VITE_BACKEND_URL
    console.log("Payment Page");

    const onSubmitHandler = async () => {
        const selectedAddress = JSON.parse(localStorage.getItem('orderAddress') || '{}');
        console.log(selectedAddress);


        console.log("inside on submit handler")
        try {
            let orderItems = [];
            for (const itemId in cartItems) {
                for (const size in cartItems[itemId]) {
                    if (cartItems[itemId][size] > 0) {
                        const product = products.find(p => p._id === itemId);
                        if (product) {
                            orderItems.push({
                                ...product, // Clone object
                                size,
                                quantity: cartItems[itemId][size]
                            });
                        }
                    }
                }
            }

            const orderData = {
                items: orderItems,
                address: selectedAddress, // Ensuring address is correctly retrieved
                amount: getCartAmount() + delivery_fee
            };

           console.log(selectedAddress)

            if (!selectedAddress) {
                throw new Error("Delivery address is missing.");
            }

            const response = await axios.post(`${url}/api/order/place-esewa`, orderData, { headers: { token } });
            console.log(response);
            if (response.data.success) {
                clearCart();
                toast.success(response.data.message);
                navigate('/orders');
            } else {
                toast.error(response.data.message);
            }
        } catch (error) {
            toast.error(error.message);
        } finally {
            navigate('/');
        }
    };

    useEffect(() => {
        if (!orderProcessed.current && status === 'success') {
            console.log("useeeffeect")
            onSubmitHandler();
            orderProcessed.current = true; // Mark as processed
        }
        if (!orderProcessed.current && status === 'failure'){
            console.log("inside failure")
        }
    }, [status, navigate]);

    return null;
};

export default PaymentStatusPage;

--- Content of file: Orders.jsx ---
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable no-unused-vars */
import React, { useEffect, useState } from "react";
import useShopStore from "../store/shopStore";
import Title from "../components/Title";
import { toast } from "react-toastify";
import axios from "axios";

const Orders = () => {
  const { token, currency } = useShopStore();
  const url = import.meta.env.VITE_BACKEND_URL;
  const [orderData, setOrderData] = useState([]);

  const fetchOrders = async () => {
    try {
      const response = await axios.post(
        `${url}/api/order/user-orders`,
        {},
        { headers: { token } }
      );
      if (response.data.success) {
        let myOrders = [];
        response.data.orders.map((order) => {
          order.items.map((item) => {
            item["status"] = order.status;
            item["payment"] = order.payment;
            item["paymentMethod"] = order.paymentMethod;
            item["date"] = order.date;
            myOrders.push(item);
          });
        });
        setOrderData(myOrders.reverse());
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error(error.message);
    }
  };


  useEffect(() => {
    fetchOrders();
  }, [token]);

  return (
    <div className="border-t pt-16">
      <div className="text-2xl">
        <Title text1={"MY"} text2={"ORDERS"} />
      </div>
      <div>
        {orderData.map((product, index) => {
          return (
            <div
              className="py-4 border-t border-b text-gray-700 flex flex-col md:flex-row md:items-center md:justify-between gap-4"
              key={index}
            >
              <div className="flex items-start gap-6 text-sm">
                <img className="w-16 sm:w-20" src={product.image[0]} alt="" />
                <div>
                  <p className="text-base font-medium">{product.name}</p>
                  <div className="flex items-center gap-3 mt-2 text-base text-gray-700">
                    <p className="text-lg">
                      {currency}{product.price + 40}
                    </p>
                    <p>{product.quantity}</p>
                    <p>Size: {product.size}</p>
                  </div>
                  <p className="mt-2">Date:{" "}<span className="text-gray-400">{new Date(product.date).toLocaleString()}</span></p>
                  <p className="mt-2">Payment:{" "}<span className="text-gray-400">{product.paymentMethod==="cod"?"Cash on Delivery":product.paymentMethod}</span></p>
                  
                </div>
              </div>
              <div className="md:w-1/2 flex justify-between">
                <div className="flex items-center gap-2">
                  <p className="min-w-2 h-2 rounded-full bg-green-500"></p>
                  <p className="text-sm md:text-base">{product.status}</p>
                </div>
                <button onClick={fetchOrders} className="cursor-pointer border px-4 py-2 text-sm font-medium rounded-sm ">
                  Track Order
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default Orders;

--- Content of file: Esewa.jsx ---
import axios from 'axios'
import React from 'react'
import useShopStore from '../store/shopStore'

const Esewa = () => {
    const {token } = useShopStore();

    const handleSubmit = async ()=>{
        const response = await axios.post("http://localhost:3000/api/order/place-esewa",{
            price: 2000
        },{headers:{token}});
        console.log(response.data);
    }
  return (
    <div>
       
        <button className=' border-2 p-4 bg-amber-200 cursor-pointer hover:opacity-80' onClick={handleSubmit}>Pay By Esewa</button>
    </div>
  )
}

export default Esewa

--- Content of file: Login.jsx ---
/* eslint-disable react-hooks/exhaustive-deps */

/* eslint-disable no-unused-vars */
import React, { useEffect, useState } from "react";
import useShopStore from "../store/shopStore";
import { toast } from "react-toastify";
import axios from "axios";
import {useNavigate} from "react-router-dom"

const Login = () => {
  const [state, setState] = useState("Sign Up");
  const { token, setToken } = useShopStore();
  const url = import.meta.env.VITE_BACKEND_URL;
  const navigate = useNavigate()

  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");

  const onSubmitHandler = async (e) => {
    e.preventDefault();
    try {
      if(state==="Sign Up"){
        const response = await axios.post(`${url}/api/user/register`, {name,email,password})
        if(response.data.success){
          toast.success("User created successfully");
          setToken(response.data.token)
          localStorage.setItem("token",response.data.token)
        }else{
          toast.error(response.data.message);
        }
        
      }else{
        const response = await axios.post(`${url}/api/user/login`, {email,password})
        if(response.data.success){
          toast.success("Logged in successfully");
          setToken(response.data.token)
          localStorage.setItem("token",response.data.token)
        }else{
          toast.error(response.data.message);
        }
      }
    } catch (error) {
      toast.error(error.message);
    }
  };

  useEffect(()=>{
    if(token){
      navigate('/')
    }
  },[token])

  return (
    <form
      onSubmit={onSubmitHandler}
      className="flex  flex-col items-center w-[90%] sm:max-w-96 m-auto mt-14 gap-4 text-gray-800  "
    >
      <div className="inline-flex items-center gap-2 mb-2 mt-10">
        <p className="text-3xl ">{state}</p>
        <hr className="border-none w-8 h-[1.7px] mt-2 bg-gray-800 " />
      </div>
      {state === "Sign Up" ? (
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full py-2 px-3 border border-gray-800"
          type="text"
          placeholder="Username"
          required
        />
      ) : (
        ""
      )}
      <input
        value={email}
        onChange={(e)=>setEmail(e.target.value)}
        className="w-full py-2 px-3 border border-gray-800"
        type="email"
        placeholder="Email address"
        required
      />
      <input
        value={password}
        onChange={(e)=>setPassword(e.target.value)}
        className="w-full py-2 px-3 border border-gray-800"
        type="password"
        placeholder="Password"
        required
      />
      <div className="w-full flex justify-between text-sm mt-[-8px]">
        {state === "Login" ? (
          <p className="cursor-pointer">Forgot password?</p>
        ) : (
          ""
        )}
        {state === "Login" ? (
          <p onClick={() => setState("Sign Up")} className="cursor-pointer">
            Create Account
          </p>
        ) : (
          <p onClick={() => setState("Login")} className="cursor-pointer">
            Already have an account?&nbsp;Login
          </p>
        )}
      </div>
      <button
        type="submit"
        className="text-white bg-black px-8 py-2 font-light mt-4 cursor-pointer"
      >
        {" "}
        {state === "Sign Up" ? "Sign Up" : "Login"}
      </button>
    </form>
  );
};

export default Login;

--- Content of file: Product.jsx ---
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable no-unused-vars */
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import useShopStore from "../store/shopStore";
import { assets } from "../assets/assets";
import RelatesProducts from "../components/RelatesProducts";

const Product = () => {
  const { productId } = useParams();
  const { products, currency,addToCart } = useShopStore();
  const [productData, setProductData] = useState(false);
  const [image, setImage] = useState("");
  const [size, setSize] = useState("");

  const fetchProductData = async () => {
    const product = products.find((product) => product._id === productId);
    setImage(product.image[0]);
    setProductData(product);
  };

  useEffect(() => {
    fetchProductData();
  }, [productId]);

  return productData ? (
    <div className="border-t-2 pt-10 transition-opacity ease-in duration-500 opacity-100 ">
      {/* Product data */}
      <div className="flex gap-12 sm:gap-12 flex-col sm:flex-row ">
        {/* Product images */}
        <div className="flex flex-1 flex-col-reverse gap-3 sm:flex-row">
          <div className="flex sm:flex-col overflow-x-auto sm:overflow-y-scroll justify-between sm:justify-normal w-full sm:w-[18.7%] ">
            {productData.image.map((img, index) => {
              return (
                <img
                  onClick={() => setImage(img)}
                  key={index}
                  src={img}
                  className="w-[24%] sm:w-full sm:mb-3 flex-shrink-0 cursor-pointer "
                />
              );
            })}
          </div>
          <div className="w-full sm:w-[80%]">
            <img className="w-full h-auto" src={image} alt="" />
          </div>
        </div>
        {/* Product information */}
        <div className="flex-1">
          <h1 className="font-medium text-2xl mt-2">{productData.name}</h1>
          <div className="flex items-center gap-1 mt-2">
            <img className="w-3.5" src={assets.star_icon} alt="" />
            <img className="w-3.5" src={assets.star_icon} alt="" />
            <img className="w-3.5" src={assets.star_icon} alt="" />
            <img className="w-3.5" src={assets.star_icon} alt="" />
            <img className="w-3.5" src={assets.star_dull_icon} alt="" />
            <p className="pl-2">(97)</p>
          </div>
          <p className="mt-5 text-3xl font-medium">
            {currency}
            {productData.price}
          </p>
          <p className="mt-5 text-gray-500 md:w-4/5">
            {productData.description}
          </p>
          <div className="flex flex-col gap-4 my-8">
            <p>Select Size</p>
            <div className="flex gap-2">
              {productData.sizes.map((sizeVal, index) => {
                return (
                  <button
                    onClick={() => setSize(sizeVal)}
                    key={index}
                    className={` py-2 px-4 bg-gray-100 cursor-pointer ${
                      sizeVal === size ? "border-orange-500 border" : ""
                    }`}
                  >
                    {sizeVal}
                  </button>
                );
              })}
            </div>
          </div>
          <button onClick={()=>addToCart(productData._id,size)} className="bg-black text-white px-8 py-3 text-sm active:bg-gray-700 cursor-pointer">
            Add to Cart
          </button>
          <hr className="mt-8 sm:w-4/5" />
          <div className="text-sm text-gray-500 mt-5 flex flex-col gap-1">
            <p>100% Original product.</p>
            <p>Cash on delivery is available on this product.</p>
            <p>Easy return & exchange policy within 7 days.</p>
          </div>
        </div>
      </div>
      {/* Description and Review section */}
      <div className="mt-20">
        <div className="flex ">
          <b className="border border-gray-200 px-5 py-3 text-sm">
            Description
          </b>
          <p className="border border-gray-200 px-5 py-3 text-sm">
            Reviews {97}
          </p>
        </div>
        <div className="flex flex-col gap-4 border border-gray-200 px-6 py-6 text-sm text-gray-500">
          <p>
            Experience the finest quality with our carefully curated products.
            Each item is crafted with premium materials, ensuring durability and
            elegance. We prioritize excellence in design, functionality, and
            comfort. Our products go through rigorous quality checks to meet the
            highest standards. Trusted by thousands, we are committed to
            delivering the best shopping experience. Shop with confidence,
            knowing you’re getting unmatched quality at the best value. Elevate
            your lifestyle with products designed to last!
          </p>
          <p>
            We offer a wide range of sizes to ensure the perfect fit for
            everyone. Our size chart is designed to guide you in choosing the
            right fit for your body type. Whether you are looking for petite,
            regular, or plus sizes, we’ve got you covered. Each product is
            available in multiple sizes to provide comfort and style for all. If
            you are unsure, our detailed sizing guide will help you make an
            informed decision. Embrace your unique shape with clothing that fits
            just right!
          </p>
        </div>
      </div>
      {/* Related products */}
      <RelatesProducts category={productData.category} subCategory={productData.subCategory} />
    </div>
  ) : (
    <div className="opacity-0"></div>
  );
};

export default Product;

--- Content of file: Cart.jsx ---
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable no-unused-vars */
import React, { useEffect, useState } from "react";
import useShopStore from "../store/shopStore";
import Title from "../components/Title";
import { assets } from "../assets/assets";
import CartTotal from "../components/CartTotal";
import {useNavigate} from "react-router-dom"

const Cart = () => {
  const { products, cartItems, currency, updateQuantity,getUserCart ,getCartAmount} = useShopStore();
  const navigate = useNavigate()

  const [cartData, setCartData] = useState([]);

  useEffect(() => {
    const tempData = [];
    for (const items in cartItems) {
      for (const size in cartItems[items]) {
        if (cartItems[items][size] > 0) {
          tempData.push({
            _id: items,
            size: size,
            quantity: cartItems[items][size],
          });
        }
      }
    }
    setCartData(tempData);
  }, [cartItems]);

  useEffect(()=>{
    getUserCart()
  },[])

  return (
    <div className="border-t pt-14">
      <div className="text-2xl mb-3">
        <Title text1={"YOUR"} text2={"CART"} />
      </div>
      <div>
        {cartData.map((item, index) => {
          const productData = products.find(
            (product) => product._id === item._id
          );
          return (
            <div
              className="py-4 border-t border-b text-gray-700 grid grid-cols-[4fr_0.5fr_0.5fr] sm:grid-cols-[4fr_2fr_0.5fr] items-center gap-4 "
              key={index}
            >
              <div className="flex items-start gap-6">
                <img
                  className="w-16 sm:w-20"
                  src={productData.image[0]}
                  alt=""
                />
                <div>
                  <p className="text-xs sm:text-lg font-medium">
                    {productData.name}
                  </p>
                  <div className="flex items-center gap-5 mt-2">
                    <p>
                      {currency}
                      {productData.price}
                    </p>
                    <p className="px-2 sm:px-3 sm:py-1  bg-slate-100 ">
                      Size:{item.size}
                    </p>
                  </div>
                </div>
              </div>
              <input
                onChange={(e) =>
                  e.target.value === "" || e.target.value === "0"
                    ? null
                    : updateQuantity(
                        item._id,
                        item.size,
                        Number(e.target.value)
                      )
                }
                className="max-w-10 border border-gray-200 sm:max-w-20 px-1 sm:px-2 py-1"
                type="number"
                min={1}
                defaultValue={item.quantity}
              />
              <img
                onClick={() => updateQuantity(item._id, item.size, 0)}
                className="w-4 mr-4 sm:w-5 cursor-pointer"
                src={assets.bin_icon}
                alt=""
              />
            </div>
          );
        })}
      </div>
      <div className="flex justify-end  my-20">
        <div className="w-full sm:w-[450px]">
          <CartTotal />
          <div className="w-full text-end">
            <button  onClick={()=>{
              if(getCartAmount()===0){
                navigate('/cart')
              }else{
                navigate('/place-order')
              }
            } } className= " cursor-pointer bg-black text-white text-sm my-8 px-8 py-3">PROCEED TO CHECKOUT
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;

--- Content of file: Contact.jsx ---
/* eslint-disable no-unused-vars */
import React from 'react'
import Title from "../components/Title"
import { assets } from '../assets/assets'
import NewsLetterBox from "../components/NewsLetterBox"

const Contact = () => {
  return (
    <div>
      <div className='border-t text-center pt-10 text-2xl'>
         <Title text1={"CONTACT"} text2={"US"}/>
      </div>
      <div className='my-10 flex flex-col justify-center md:flex-row gap-10 mb-28'>
        <img className='w-full md:max-w-[450px]' src={assets.contact_img} alt="" />
        <div className='flex flex-col justify-center items-start gap-6'>
          <p className='font-semibold text-xl text-gray-600'>Our Store</p>
          <p className='text-gray-500'> Hadigaun <br/>Kathmandu, Nepal </p>
          <p className='text-gray-500'>Tel: 522-24234 <br />Email: fashionnepal@gmail.com</p>
          <p className='font-semibold text-xl text-gray-600'>Careers at Fashion Nepal</p>
          <p className='text-gray-500'>Learn more about our teams and job openings.</p>
          <button className='border border-black px-8 py-4 hover:bg-black hover:text-white cursor-pointer transition-all duration-500'>Explore Jobs</button>
        </div>
      </div>
      <NewsLetterBox/>
    </div>
  )
}

export default Contact

--- Content of file: Home.jsx ---


/* eslint-disable no-unused-vars */
import React, { useEffect } from 'react'
import Hero from '../components/Hero'
import LatestCollections from '../components/LatestCollections'
import BestSeller from '../components/BestSeller'
import OurPolicy from '../components/OurPolicy'
import NewsLetterBox from '../components/NewsLetterBox'
import useShopStore from '../store/shopStore'

const Home = () => {
  const getProductsData = useShopStore((state) => state.getProductsData);
    useEffect(() => {
        getProductsData(); 
    }, [getProductsData]);
    
  return (
    <div>
      <Hero/>
      <LatestCollections/>
      <BestSeller/>
      <OurPolicy/>
      <NewsLetterBox/>
    </div>
  )
}

export default Home
